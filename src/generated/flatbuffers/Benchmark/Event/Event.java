// automatically generated by the FlatBuffers compiler, do not modify

package Benchmark.Event;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Event extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Event getRootAsEvent(ByteBuffer _bb) { return getRootAsEvent(_bb, new Event()); }
  public static Event getRootAsEvent(ByteBuffer _bb, Event obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Event __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Benchmark.Event.Header header() { return header(new Benchmark.Event.Header()); }
  public Benchmark.Event.Header header(Benchmark.Event.Header obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public byte payload(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int payloadLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector payloadVector() { return payloadVector(new ByteVector()); }
  public ByteVector payloadVector(ByteVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer payloadAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer payloadInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createEvent(FlatBufferBuilder builder,
      int headerOffset,
      int payloadOffset) {
    builder.startTable(2);
    Event.addPayload(builder, payloadOffset);
    Event.addHeader(builder, headerOffset);
    return Event.endEvent(builder);
  }

  public static void startEvent(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addHeader(FlatBufferBuilder builder, int headerOffset) { builder.addOffset(0, headerOffset, 0); }
  public static void addPayload(FlatBufferBuilder builder, int payloadOffset) { builder.addOffset(1, payloadOffset, 0); }
  public static int createPayloadVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createPayloadVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startPayloadVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endEvent(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEventBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedEventBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Event get(int j) { return get(new Event(), j); }
    public Event get(Event obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}


// automatically generated by the FlatBuffers compiler, do not modify

package Benchmark.Event;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Header extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Header getRootAsHeader(ByteBuffer _bb) { return getRootAsHeader(_bb, new Header()); }
  public static Header getRootAsHeader(ByteBuffer _bb, Header obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Header __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String targetStream() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer targetStreamAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer targetStreamInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String routingKey() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer routingKeyAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer routingKeyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public long executionTime() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createHeader(FlatBufferBuilder builder,
      byte type,
      int targetStreamOffset,
      int routingKeyOffset,
      long executionTime) {
    builder.startTable(4);
    Header.addExecutionTime(builder, executionTime);
    Header.addRoutingKey(builder, routingKeyOffset);
    Header.addTargetStream(builder, targetStreamOffset);
    Header.addType(builder, type);
    return Header.endHeader(builder);
  }

  public static void startHeader(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(0, type, 0); }
  public static void addTargetStream(FlatBufferBuilder builder, int targetStreamOffset) { builder.addOffset(1, targetStreamOffset, 0); }
  public static void addRoutingKey(FlatBufferBuilder builder, int routingKeyOffset) { builder.addOffset(2, routingKeyOffset, 0); }
  public static void addExecutionTime(FlatBufferBuilder builder, long executionTime) { builder.addLong(3, executionTime, 0L); }
  public static int endHeader(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Header get(int j) { return get(new Header(), j); }
    public Header get(Header obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

